@startuml production
left to right direction

class ProductionFacility {
    id: str
    name: str
    description: str
    location: str
    supplyItems: WarehouseSupplyItem[]
    productItems: WarehouseProductItem[]
    purchaseRequisitions: PurchaseRequisition[]
    purchaseOrders: PurchaseOrder[]
    productionOrders: ProductionOrder[]
    salesOrders: SalesOrder[]
    users: User[]
}
note left: Inventory and production users\nare assigned to a ProductionFacility
ProductionFacility "0..1" o-- "0..*" User

abstract Goods {
    id: int
    name: str
    description: str
    unit: str
    price: money
}

class Supply {
    vendor: Vendor
    purchaseOrderItems: PurchaseOrderItem[]
    purchaseRequisitionItems: PurchaseRequisitionItem[]
}
Goods <|-- Supply

class Product {
    netWeight: money
    supplyCostItems: ProductionSupplyCostItem[]
    supplyCost: money
    laborCost: money
    productionCost: money
    productionOrderItems: ProductionOrderItem[]
    salesOrderItems: SalesOrderItem[]
}
note top
    supplyCost = sum of ProductionSupplyCostItem.totalCost in supplyCostItems
    productionCost = laborCost + supplyCost
endnote
Goods <|-- Product

class ProductionSupplyCostItem {
    product: Product
    supply: Supply
    quantity: double
    --Calculated--
    unitCost: money
    totalCost: money
}
note top: unitCost is supply's price
Product "1..1" *-- "0..*" ProductionSupplyCostItem
Supply "1..1" o-- "0..*" ProductionSupplyCostItem

enum ProductionOrderStatus {
    PendingApproval
    Approved
    Rejected
    Started
    Produced
    Completed
    Canceled
    Unaccepted
}

class ProductionOrder {
    id: int
    items: ProductionOrderItem[]
    totalValue: money
    totalCost: money
    profit: money
    facility: ProductionFacility
    status: ProductionOrderStatus
    events: OrderEvent[]
    problem: str?
    createTime: datetime
    startTime: datetime
    finishTime: datetime
    createUser: User
    finishUser: User?
    approveProductionManager: User?
    updateProgress(event: OrderEvent)
    approve()
    start()
    complete()
    cancel(problem: str)
    reportDefect(problem: str)
}
note top
    totalValue = sum of totalValue of all items
    totalCost = sum of totalCost of all items
endnote
ProductionFacility "1..1" o-- "0..*" ProductionOrder
User "1..1" o-- "0..*" ProductionOrder : Approve

class ProductionOrderItem {
    order: ProductionOrder
    product: Product
    quantity: double
    unit: str
    unitPrice: money
    unitCost: money
    totalValue: money
    totalCost: money
}
note top
    unitPrice = product's price
    unitCost = product's productionCost
    totalValue = unitPrice * quantity
    totalCost = unitCost * quantity
endnote
ProductionOrder "1..1" *-- "1..*" ProductionOrderItem
Product "1..1" o-- "0..*" ProductionOrderItem

enum ProductionOrderEventType {
    PendingApproval
    Approved
    Rejected
    Started
    StageDone
    Produced
    Completed
    Canceled
    Unaccepted
    Interrupted
}

class ProductionOrderEvent {
    id: int
    type: OrderEventType
    time: datetime
    location: str
    note: str?
    Order: order
}
ProductionOrder "1..1" *-- "1..*" OrderEvent
@enduml