@startuml classes
left to right direction

enum Gender {
    Male
    Female
    Other
}

enum UserRole {
    Admin
    Director
    ProcurementManager
    ProcurementSpecialist
    ProductionManager
    ProductionSpecialist
    SalesManager
    SalesSpecialist
    InventoryManager
    InventorySpecialist
}

class User {
    id: str
    userName: str
    name: str
    gender: Gender
    email: str
    phoneNumber: str
    description: str
    role: UserRole
    notifications: Notification[]
    warehouse: Warehouse?
    createdPurchaseRequisitions: PurchaseRequisition[]
    approvedPurchaseRequisitions: PurchaseRequisition[]
    createdPurchaseOrders: PurchaseOrder[]
    createdSalesOrders: SalesOrder[]
    createdProductionOrders: ProductionOrder[]
    approvedProductionOrders: ProductionOrder[]
}
Warehouse "0..1" o-- "0..*" User

class Notification {
    id: int
    time: datetime
    hasRead: bool
    content: str
}
User "1..1" *-- "0..*" Notification

abstract Company {
    id: int
    name: str
    location: str
    description: str
    email: str
    phoneNumber: str
    contactPerson: str
}

class Vendor {
    supplies: Supply[]
    purchaseOrders: PurchaseOrder[]
    purchaseRequisitions: PurchaseRequisition[]

}
Company <|-- Vendor

class Retailer {
    products: Product[]
    salesOrders: SalesOrder[]
}
Company <|-- Retailer

abstract Goods {
    id: int
    name: str
    description: str
    unit: str
    price: money
}

class Supply {
    purchaseOrderItems: PurchaseOrderItem[]
    purchaseRequisitionItems: PurchaseRequisitionItem[]
}
Goods <|-- Supply
Vendor "1..1" o-- "0..*" Supply

class Product {
    productionCostItems: ProductionCostItem[]
    productionCost: money
    productionOrderItems: ProductionOrderItem[]
    salesOrderItems: SalesOrderItem[]
}
Goods <|-- Product
note top: productionCost = sum of totalCost of all productionCostItems

class ProductionCostItem {
    product: Product
    supply: Supply
    quantity: double
    --Calculated--
    unitCost: money
    totalCost: money
}
Product "1..1" *-- "0..*" ProductionCostItem
Supply "1..1" o-- "0..*" ProductionCostItem
note top: unitCost is supply's price"

enum OrderStatus {
    Processing
    Delivering
    Interrupted
    Delivered
    Canceled
    Returned
}

enum OrderPaymentStatus {
    Pending
    Due
    Completed
}

abstract Order {
    id: int
    subTotal: money
    vatRate: double
    vatAmount: money
    totalAmount: money
    status: OrderStatus
    paymentStatus: OrderPaymentStatus
    invoice: url?
    receipt: url?
    createTime: datetime
    finishTime: datetime
    creatingUser: User
    finishingUser: User?
}
User "1..1" o-- "0..*" Order : Create
User "1..1" o-- "0..*" Order : Finish
note top
    subTotal is sum of totalPrice of all items
    vatAmount = subTotal * vatRate
    totalAmount = subTotal + vatAmount
    <b>This abstract class is for sales and purchase orders,
    <b>not production orders
endnote

abstract OrderItem {
    quantity: double
    unit: str
    unitPrice: money
    totalPrice: money
}
note top
    totalPrice = unitPrice * quantity
    <b>This abstract class is for sales
    <b>and purchase orders/requisitions, not production orders
endnote

enum OrderProgressUpdateType {
    Processing
    Left
    Arrived
    Delivered
    PaymentDue
    PaymentCompleted
    Canceled
    Returned
    Interrupted
}

class OrderProgressUpdate {
    id: int
    type: OrderProgressUpdateType
    time: datetime
    location: str
    note: str?
    Order: order
}
Order "1..1" *-- "1..*" OrderProgressUpdate

enum PurchaseRequisitionStatus {
    PendingApproval
    Approved
    Purchasing
    Completed
    Canceled
}

class PurchaseRequisition {
    id: int
    subTotal: money
    vatRate: double
    vatAmount: money
    totalAmount: money
    items: PurchaseRequisitionItem[]
    vendor: Vendor
    status: PurchaseRequisitionStatus
    createTime: datetime
    finishTime: datetime
    creatingUser: User
    approvingProductionManager: User?
    approvingFinance: User?
    order: PurchaseOrder?
}
Vendor "1..1" o-- "0..*" PurchaseRequisition
User "0..*" o-- "1..1" PurchaseRequisition : Approve
note top
    subTotal = sum of total price of all items
    vatAmount = subTotal * vatRate
    totalAmount = subTotal + vatAmount
endnote

class PurchaseRequisitionItem {
    supply: Supply
    requisition: Requisition
}
OrderItem <|-- PurchaseRequisitionItem
PurchaseRequisition "1..1" *-- "1..*" PurchaseRequisitionItem
Supply "1..1" o-- "0..*" PurchaseRequisitionItem

class PurchaseOrder {
    items: PurchaseOrderItem[]
    discountAmount: money
    vendor: Vendor
    fromLocation: str
    toWarehouse: Warehouse
    requisition: PurchaseRequisition
}
Order <|-- PurchaseOrder
Vendor "1..1" o-- "0..*" PurchaseOrder
Warehouse "1..1" o-- "0..*" PurchaseOrder
PurchaseRequisition "1..1" o-- "0..1" PurchaseOrder
note top
    discountAmount is entered manually
    totalAmount = subTotal - discountAmount + vatAmount
endnote

class PurchaseOrderItem {
    supply: Supply
    order: PurchaseOrder
    discount: money
    netPrice: money
}
OrderItem <|-- PurchaseOrderItem
PurchaseOrder "1..1" *-- "1..*" PurchaseOrderItem
Supply "1..1" o-- "0..*" PurchaseOrderItem
note top: discount is entered manually

class SalesOrder {
    items: SalesOrderItem[]
    retailer: Retailer
    fromWarehouse: Warehouse
    toLocation: str
}
Order <|-- SalesOrder
Retailer "1..1" o-- "0..*" SalesOrder
Warehouse "1..1" o-- "0..*" SalesOrder

class SalesOrderItem {
    order: SalesOrder
    product: Product
}
OrderItem <|-- SalesOrderItem
SalesOrder "1..1" *-- "1..*" SalesOrderItem
Product "1..1" o-- "0..*" SalesOrderItem

enum ProductionOrderStatus {
    PendingApproval
    Approved
    Started
    Completed
}

class ProductionOrder {
    id: int
    items: ProductionOrderItem[]
    totalValue: money
    totalCost: money
    profit: money
    status: ProductionOrderStatus
    createTime: datetime
    finishTime: datetime
    creatingUser: User
    finishingUser: User?
    approvingProductionManager: User?
}
User "0..*" o-- "1..1" ProductionOrder : Approve
note top
    totalValue = sum of totalValue of all items
    totalCost = sum of totalCost of all items
endnote

class ProductionOrderItem {
    order: ProductionOrder
    product: Product
    quantity: double
    unit: str
    unitPrice: money
    unitCost: money
    totalValue: money
    totalCost: money
}
ProductionOrder "1..1" *-- "1..*" ProductionOrderItem
Product "1..1" o-- "0..*" ProductionOrderItem
note top
    unitPrice = product's price
    unitCost = product's productionCost
    totalValue = unitPrice * quantity
    totalCost = unitCost * quantity
endnote

abstract InventoryItem {
    quantity: double
    note: str?
    --Calculated--
    unit: str
    unitValue: money
    totalValue: money
}
note top
    unitValue = item's price
    totalValue = unitValue * quantity
endnote

class Warehouse {
    id: str
    name: str
    description: str
    supplyItems: SupplyItem[]
    productItems: ProductItem[]
    issues: WarehouseIssue[]
    receipts: WarehouseReceipt[]
    users: User[]
}

abstract WarehouseItem {
    warehouse: Warehouse
}
InventoryItem <|-- WarehouseItem

class WarehouseSupplyItem {
    supply: Supply
}
WarehouseItem <|-- WarehouseSupplyItem
Warehouse "1..1" *-- "0..*" WarehouseSupplyItem
Supply "1..1" o-- "0..*" WarehouseSupplyItem

class WarehouseProductItem {
    Product: Product
}
WarehouseItem <|-- WarehouseProductItem
Warehouse "1..1" *-- "0..*" WarehouseProductItem
Product "1..1" o-- "0..*" WarehouseProductItem

abstract WarehouseForm {
    int: id
    warehouse: Warehouse
    createTime: datetime
    totalValue: money
}
note top
    totalValue = sum of totalPrice of all items
endnote

abstract WarehouseFormItem
InventoryItem <|-- WarehouseFormItem

class WarehouseIssue {
    salesOrderId: int
    salesOrder: SalesOrder
    items: WarehouseIssueItem[]
}
WarehouseForm <|-- WarehouseIssue
SalesOrder "1..1" o-- "1..1" WarehouseIssue
Warehouse "1..1" o-- "0..*" WarehouseIssue

class WarehouseIssueItem {
    issue: WarehouseIssue
    product: Product
}
WarehouseFormItem <|-- WarehouseIssueItem
WarehouseIssue "1..1" *-- "1..*" WarehouseIssueItem
Product "1..1" o-- "0..*" WarehouseIssueItem

class WarehouseReceipt {
    purchaseOrderId: int
    purchaseOrder: PurchaseOrder?
    productionOrder: ProductionOrder?
    items: WarehouseReceiptItem[]
}
WarehouseForm <|-- WarehouseReceipt
PurchaseOrder "0..1" o-- "0..1" WarehouseReceipt
ProductionOrder "0..1" o-- "0..1" WarehouseReceipt
Warehouse "1..1" o-- "0..*" WarehouseReceipt
note top: Either purchaseOrder or productionOrder must not be empty

class WarehouseReceiptItem {
    receipt: WarehouseReceipt
    supply: Supply?
    product: Product?
}
WarehouseFormItem <|-- WarehouseReceiptItem
WarehouseReceipt "1..1" *-- "1..*" WarehouseReceiptItem
Supply "0..1" o-- "0..*" WarehouseReceiptItem
Product "0..1" o-- "0..*" WarehouseReceiptItem
note top: Either supply or product must not be empty
@enduml