@startuml sales
left to right direction

abstract Company {
    id: int
    name: str
    location: str
    description: str
    email: str
    phoneNumber: str
    contactPerson: str
}

class Retailer {
    salesOrders: SalesOrder[]
}
Company <|-- Retailer

abstract Goods {
    id: int
    name: str
    description: str
    unit: str
    price: money
}

class Product {
    productionCostItems: ProductionCostItem[]
    productionCost: money
    productionOrderItems: ProductionOrderItem[]
    salesOrderItems: SalesOrderItem[]
}
Goods <|-- Product
note bottom: productionCost = sum of totalCost of all productionCostItems

enum OrderStatus {
    Processing
    Delivering
    Interrupted
    Delivered
    Canceled
    Returned
}

enum OrderPaymentStatus {
    Pending
    Due
    Completed
}

abstract Order {
    id: int
    subTotal: money
    vatRate: double
    vatAmount: money
    totalAmount: money
    remainingAmount: money
    fromLocation: str?
    toLocation: str
    status: OrderStatus
    paymentStatus: OrderPaymentStatus
    events: OrderEvent[]
    problem: str?
    invoice: url?
    receipt: url?
    createTime: datetime
    deliverTime: datetime
    finishTime: datetime
    createUser: User
    finishUser: User?
    updateProgress(event: OrderEvent)
    complete()
    completePayment()
    cancel(problem: str)
    return(problem: str)
}
User "1..1" o-- "0..*" Order : Create
User "1..1" o-- "0..*" Order : Finish
note bottom
    subTotal = sum of totalPrice of all items
    vatAmount = subTotal * vatRate
    totalAmount = subTotal + vatAmount
    deliverTime = time the status changed to Delivered
    <b>This abstract class is for sales and purchase orders,
    <b>not production orders
endnote

abstract OrderItem {
    quantity: double
    unit: str
    unitPrice: money
    totalPrice: money
}
note top
    totalPrice = unitPrice * quantity
    <b>This abstract class is for sales
    <b>and purchase orders/requisitions, not production orders
endnote

enum OrderEventType {
    Processing
    Left
    Arrived
    Delivered
    PaymentDue
    PaymentCompleted
    Canceled
    Returned
    Interrupted
}

class OrderEvent {
    id: int
    type: OrderEventType
    time: datetime
    location: str
    note: str?
    Order: order
}
Order "1..1" *-- "1..*" OrderEvent

class SalesOrder {
    items: SalesOrderItem[]
    fromFacility: ProductionFacility?
    toRetailer: Retailer
}
Order <|-- SalesOrder
Retailer "1..1" o-- "0..*" SalesOrder
ProductionFacility "0..1" o-- "0..*" SalesOrder

class SalesOrderItem {
    order: SalesOrder
    product: Product
}
OrderItem <|-- SalesOrderItem
SalesOrder "1..1" *-- "1..*" SalesOrderItem
Product "1..1" o-- "0..*" SalesOrderItem
@enduml